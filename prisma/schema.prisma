// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String  @id @default(cuid())
  clerkUserId   String  @unique
  email         String   @unique
  name          String?
  imageUrl      String?
  createdIssues Issue[]   @relation("Reporter")
  assignedIssues Issue[]  @relation("Assignee")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Project {
  id      String  @id @default(cuid())
  name    String 
  key     String
  description String?
  organizationId String  //This will store the clerk origanization id
  sprints Sprint[]
  issues Issue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, key])
}

model Sprint {
  id        String @id @default(cuid())
  name      String @unique
  startDate DateTime
  endDate   DateTime
  status    SprintStatus @default(PLANNED)
  project   Project @relation(fields:[projectId],references:[id],onDelete:Cascade)
  projectId String
  issues    Issue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}


model Issue {
  id     String  @id @default(cuid())
  title  String
  description String?
  status      IssueStatus 
  order       Int   
  priority    IssuePriority    
  assignee    User?       @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  reporter    User        @relation("Reporter", fields: [reporterId], references: [id])
  reporterId  String
  sprint      Sprint?     @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId    String?
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([status , order])

}

enum IssueStatus{
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum IssuePriority{
  LOW
  MEDIUM
  HIGH
  URGENT
}